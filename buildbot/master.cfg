# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.process import buildstep
from twisted.internet import defer

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

#基于普通dict和list实现
class LRUCache(object):
    def __init__(self):
        self.key = []
 
    def get(self):
        val=self.key.pop()
        self.key.insert(0,val)
        return val
 
    def set(self, val):
        self.key.append(val)

lru=LRUCache()
lru.set("builder1-worker1")
lru.set("builder1-worker2")

#this is the costomized build step,using shell mixin to run script on worker.
class RunTestScript(buildstep.ShellMixin,buildstep.BuildStep):
    def __init__(self,testScript="./run.sh",**kwargs):
        self.testScript=testScript
        kwargs=self.setupShellMixin(kwargs,prohibitArgs=['command'])
        buildstep.BuildStep.__init__(self,**kwargs)
        
    @defer.inlineCallbacks
    def run(self):
        cmd=yield self.makeRemoteShellCommand(command=[self.testScript])
        yield self.runCommand(cmd)
        
        if cmd.didFail():
            cmd=yield self.makeRemoteShellCommand([self.testScript,'--force'],logEnviron=False)
            yield self.runCommand(cmd)
        defer.returnValue(cmd.results())

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = []
#c['workers'].append(worker.Worker("builder0-worker0", "pass"))
#c['workers'].append(worker.Worker("builder0-worker1", "pass"))
#c['workers'].append(worker.Worker("builder1-worker0", "pass"))
c['workers'].append(worker.Worker("builder1-worker1", "pass"))
c['workers'].append(worker.Worker("builder1-worker2", "pass"))

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the local git server.

#we don't use gitPoller to pull things back periodly,we use git trigger
c['change_source'] = []
c['change_source'].append(changes.PBChangeSource(port=9989, user='yanlf', passwd='ylf123456'))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["builder3"]))
#builderNames=["builder0","builder1","builder2","builder3"]))
#c['schedulers'].append(schedulers.ForceScheduler(
#                            name="force",
#                            builderNames=["runtests"]))

####### BUILDERS

#builders' priority which decides which builder should run first when they are idle.
#def prioritizeBuilders(buildermaster,builders):
#	"""define a list of builders,and define which should run first,
#	the original logic is the pick up the next build which has the oldest build request.	
#	"""
#	builderPriorities={"builder0":0,"builder1":1,"builder2":2,"builder3":3}
#	builders.sort(key=lambda b:builderPriorities.get(b.name,0))
#	return builders
#c['prioritizeBuilders']=prioritizeBuilders

#simply return the earliest build task.
#def nextBuild(bldr,requests):
#	return requests[0]

def nextWorker(builder,workers,buildrequest):
	name=lru.get()
	for worker in workers:
		if worker.worker.workername == name:
			return worker
	return workers[0]

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl='git@192.168.9.119:/home/git/srv/dts.git', mode='incremental'))
# run the tests 
#factory.addStep(steps.ShellSequence(
#	commands=[
#		util.ShellArg(command=['cd ./source'])
#		util.ShellArg(command=['make','clear'])
#		util.ShellArg(command=['make'],logfile='make')
#		util.ShellArg(command=['cd ..'])
#		]
#))
factory.addStep(RunTestScript("./script/run.sh"))

c['builders'] = []
#c['builders'].append(
#	util.BuilderConfig(name="builder0",
#	workernames=["builder0-worker0"],
#	nextBuild=nextBuild,
#	factory=factory))
#c['builders'].append(
#	util.BuilderConfig(name="builder1",
#	workernames=["builder0-worker1"],
#	nextBuild=nextBuild,
#	factory=factory))
#c['builders'].append(
#	util.BuilderConfig(name="builder2",
#	workernames=["builder1-worker0"],
#	nextBuild=nextBuild,
#	factory=factory))
c['builders'].append(
	util.BuilderConfig(name="builder3",
	workernames=["builder1-worker1","builder1-worker2"],
	nextWorker=nextWorker,
	factory=factory))
#c['builders'].append(
#    util.BuilderConfig(name="runtests",
#      workernames=["builder0-worker0","builder1-worker1"],
#      factory=factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Distributed Testing System"
c['titleURL'] = "https://github.com/lanfei422/test"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
